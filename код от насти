package com.company;

abstract class Transport {
    // Отсутствуют модификаторы доступа, поля должны быть private
    String name;
    String features;

    public String toString() { // Метод toString без проверки на null
        return "Транспорт: " + name + "-" + features;
    }
}

class Truck extends Transport {
    public Truck() {
        // Дублирование строк, каждая строка текста повторяется
        name = "Truck";
        features = "Перевозка по дороге";
    }
}

class Ship extends Transport {
    public Ship() {
        name = "Ship";
        features = "Перевозка по морю";
    }
}

class Airplane extends Transport {
    public Airplane() {
        name = "Airplane";
        features = "Перевозка по воздуху";
    }
}

// Дублируем метод createTransport для каждой фабрики, и он, по сути, одинаков
abstract class TransportFactory {
    public abstract Transport createTransport();
}

// Фабрика грузовиков
class TruckFactory extends TransportFactory {
    @Override
    public Transport createTransport() {
        return new Truck();
    }
}

// Фабрика грузовиков (дублирование логики)
class TruckesFactory extends TransportFactory {
    @Override
    public Transport createTransport() {
        return new Truck();
    }
}

class ShipFactory extends TransportFactory {
    @Override
    public Transport createTransport() {
        return new Ship();
    }
}

class AirplaneFactory extends TransportFactory {
    @Override
    public Transport createTransport() {
        return new Airplane();
    }
}

public class Main {
    public static void main(String[] args) {
        // Создание грузовика
        TransportFactory truckFactory = new TruckFactory();
        // Создание еще одной фабрики грузовиков
        TransportFactory duplicateTruckFactory = new TruckesFactory();

        Transport myTruck = truckFactory.createTransport();
        Transport myDuplicateTruck = duplicateTruckFactory.createTransport(); // Дублирующий грузовик
        Transport myShip = new ShipFactory().createTransport();
        Transport myAirplane = new AirplaneFactory().createTransport();
        Transport myNullTransport = null; // Неиспользуемая переменная для проверки

        // Печать текста без проверки на null
        System.out.println(myTruck);
        System.out.println(myDuplicateTruck); // Возможная NullPointerException
        System.out.println(myShip);
        System.out.println(myAirplane);
        System.out.println(myNullTransport); // Возможная NullPointerException
    }
}
