package com.company;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

public class Main {

    static class Point {
        int x, y;

        Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        int distanceToAxes() {
            return Math.min(Math.abs(x), Math.abs(y));  // минимальное расстояние до осей
        }

        int getQuadrant() {
            if (x > 0 && y > 0) return 0; // 1 четверть
            if (x < 0 && y > 0) return 1; // 2 четверть
            if (x < 0 && y < 0) return 2; // 3 четверть
            return 3; // 4 четверть
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Введите количество точек: ");
        int N = scanner.nextInt();
        List<Point> points = new ArrayList<>();

        // Чтение координат точек
        System.out.println("Введите координаты точек :");
        for (int i = 0; i < N; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            if (x != 0 && y != 0) {
                points.add(new Point(x, y));
            }
        }

        int[] countInQuadrants = new int[4];
        List<Point>[] pointsInQuadrants = new List[4];
        for (int i = 0; i < 4; i++) {
            pointsInQuadrants[i] = new ArrayList<>();
        }

        // сбор данных по четвертям
        for (Point point : points) {
            int quadrant = point.getQuadrant();
            countInQuadrants[quadrant]++;
            pointsInQuadrants[quadrant].add(point);
        }

        int selectedQuadrant = -1;
        int maxCount = 0;
        Point closestPoint = null;

        // поиск лучшей четверти
        for (int i = 0; i < 4; i++) {
            if (countInQuadrants[i] > maxCount) {
                maxCount = countInQuadrants[i];
                selectedQuadrant = i;
                closestPoint = findClosestPoint(pointsInQuadrants[i]);
            } else if (countInQuadrants[i] == maxCount && closestPoint != null) {
                Point currentClosest = findClosestPoint(pointsInQuadrants[i]);
                if (currentClosest.distanceToAxes() < closestPoint.distanceToAxes()) {
                    closestPoint = currentClosest;
                    selectedQuadrant = i;
                }
            }
        }

        if (selectedQuadrant != -1) {
            System.out.printf("Координатная четверть K = %d%n", selectedQuadrant + 1);
            System.out.printf("Количество точек M = %d%n", maxCount);
            System.out.printf("Наименее удаленная точка A = (%d, %d)%n", closestPoint.x, closestPoint.y);
            System.out.printf("Минимальное расстояние R = %d%n", closestPoint.distanceToAxes());
        } else {
            System.out.println("Необходимо ввести хотя бы одну точку в каждой четверти.");
        }
    }

    private static Point findClosestPoint(List<Point> points) {
        return points.stream()
                .min(Comparator.comparingInt(Point::distanceToAxes))
                .orElse(null);
    }
}
