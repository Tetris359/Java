import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

class Debugger {
    private static final Logger logger = Logger.getLogger(Debugger.class.getName());

    public void logDebug(String message) {
        logger.log(Level.FINE, message);
    }

    public void logError(String message) {
        logger.log(Level.SEVERE, message);
    }
}

class Book {
    private final String title;
    private final String author;

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    @Override
    public String toString() {
        return title + " by " + author;
    }
}

class BookAlreadyExistsException extends IllegalArgumentException {
    public BookAlreadyExistsException(String message) {
        super(message);
    }
}

public class Library {
    private final List<Book> books;
    private final Debugger debugger;

    public Library() {
        books = new ArrayList<>();
        debugger = new Debugger();
    }

    public void addBook(String title, String author) {
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(title) && book.getAuthor().equalsIgnoreCase(author)) {
                debugger.logError("Duplicate book: " + title + " by " + author);
            }
        }
        books.add(new Book(title, author));
        debugger.logDebug("Added book: " + title + " by " + author);
    }

    public List<Book> searchByAuthor(String author) {
        List<Book> results = new ArrayList<>();
        for (Book book : books) {
            if (book.getAuthor().equalsIgnoreCase(author)) {
                results.add(book);
            }
        }
        if (results.isEmpty()) {
            debugger.logDebug("No books found by author: " + author);
        }
        return results;
    }

    public Book searchByTitle(String title) {
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(title)) {
                return book;
            }
        }
        debugger.logError("Book not found: " + title);
        throw new IllegalArgumentException("Book not found: " + title);
    }

    public static void main(String[] args) {
        Debugger debugger = new Debugger();
        Library library = new Library();

        library.addBook("1984", "George Orwell");
        library.addBook("Brave New World", "Aldous Huxley");

        try {
            library.addBook("1984", "George Orwell"); // попытка добавить дубликат
        } catch (BookAlreadyExistsException e) {
            debugger.logError("An error occurred: " + e.getMessage());
            System.out.println(e.getMessage());
        }

        try {
            Book book = library.searchByTitle("The Great Gatsby"); // обработка ошибки
            System.out.println("Found book: " + book);
        } catch (IllegalArgumentException e) {
            debugger.logError( e.getMessage());
            System.out.println(e.getMessage());
        }
    }
}
