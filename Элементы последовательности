package com.company;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        try {
            List<Integer> numberList = readNumbersFromFile("C:\\Users\\savin\\Downloads\\17.txt");
            CalculationResult result = processNumbers(numberList);
            System.out.println(result.pairCount + " " + result.maximumSum);
        } catch (IOException e) {
            System.err.println("Ошибка при чтении файла: " + e.getMessage());
        }
    }

    private static List<Integer> readNumbersFromFile(String filePath) throws IOException {
        List<Integer> numberList = new ArrayList<>();
        try (Scanner scanner = new Scanner(new File(filePath))) {
            while (scanner.hasNextInt()) {
                numberList.add(scanner.nextInt());
            }
        }
        return numberList;
    }

    private static CalculationResult processNumbers(List<Integer> numberList) {
        int smallestFourDigit = Integer.MAX_VALUE, lastDigit = -1;
        for (int number : numberList) {
            if (isFourDigit(number) && number < smallestFourDigit) {
                smallestFourDigit = number;
                lastDigit = number % 10;
            }
        }

        if (lastDigit == -1) return new CalculationResult(0, 0);

        int pairCount = 0, maximumSum = 0;
        for (int i = 0; i < numberList.size() - 1; i++) {
            int first = numberList.get(i), second = numberList.get(i + 1);
            if (isLessThan105(first, second) && (first * second) % 10 == lastDigit) {
                pairCount++;
                maximumSum = Math.max(maximumSum, first + second);
            }
        }

        return new CalculationResult(pairCount, maximumSum);
    }

    private static boolean isFourDigit(int number) {
        return number >= 1000 && number < 10000;
    }

    private static boolean isLessThan105(int a, int b) {
        return a < 105 || b < 105;
    }

    private static class CalculationResult {
        final int pairCount, maximumSum;

        CalculationResult(int pairCount, int maximumSum) {
            this.pairCount = pairCount;
            this.maximumSum = maximumSum;
        }
    }
}
